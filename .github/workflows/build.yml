name: "Build and Push Container Image"

on:
  push:
    tags:
      - 'v*'  # This will match any tag that starts with 'v'

env:
  IMAGE_NAME: myblog

jobs:
  # This pushes the image to GitHub Packages.
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Get branch name
        id: get_branch
        run: |
          BRANCH_NAME=$(git branch -r --contains $GITHUB_SHA | grep -Eo 'origin/[^ ]+' | grep -v 'HEAD' | head -1 | sed 's|origin/||')
          echo "branch=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Check if branch is main
        if: env.branch == 'main'
        run: echo "Branch is main"

      - name: Build image
        if: env.branch == 'main'
        run: docker build . --file Containerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        if: env.branch == 'main'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        if: env.branch == 'main'
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # This strips the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # This strips the "v" prefix from the tag name.
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest
          # This uses the Docker `dev` tag when built from the `dev` branch.
          [ "$VERSION" == "testing" ] && VERSION=testing
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION